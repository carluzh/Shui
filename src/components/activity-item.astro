---
import StudyActivityCard from "./cards/study-activity-card.astro";
import ProjectActivityCard from "./cards/project-activity-card.astro";
import MathAcademyCard from "./cards/math-academy/index.astro";
import ProgressActivityCard from "./cards/progress-activity-card.astro";
import LearningActivityCard from "./cards/learning-activity-card.astro";
import PlanningActivityCard from "./cards/planning-activity-card.astro";
import StartActivityCard from "./cards/start-activity-card.astro";
import { formatDate } from "../utils/helpers";
import { getTagClasses } from "../utils/classNames";
import type { LogitActivity } from "@/types";

interface Props {
  item: LogitActivity;
  isLast: boolean;
}

const { item, isLast } = Astro.props;

const getActivityComponent = (item: LogitActivity) => {
  switch (item.type) {
    case "study":
      return StudyActivityCard;
    case "project":
      return ProjectActivityCard;
    case "math-academy":
      return MathAcademyCard;
    case "progress":
      return ProgressActivityCard;
    case "learning":
      return LearningActivityCard;
    case "planning":
      return PlanningActivityCard;
    case "start":
      return StartActivityCard;
    default:
      return null;
  }
};

const ActivityComponent = getActivityComponent(item);
---

<div class="flex items-start gap-4 relative">
  <div
    class="flex-shrink-0 w-8 h-8 rounded-full bg-muted flex items-center justify-center text-lg z-10"
  >
    {item.icon}
  </div>
  {!isLast && <div class="absolute left-4 top-8 h-full w-px bg-border" />}

  {
    ActivityComponent ? (
      <ActivityComponent item={item as never} />
    ) : (
      <div class="flex-grow border bg-muted/30 p-4 rounded-md transition-all hover:shadow-md hover:border-primary/50">
        <p class="font-semibold">{item.title}</p>
        {item.details && (
          <p class="text-sm text-muted-foreground mt-1">{item.details}</p>
        )}

        <div class="flex justify-between items-center mt-1">
          <div class="flex flex-wrap gap-2">
            {item.tags.map((tag) => (
              <span
                class={`text-xs px-2 py-1 rounded-full ${getTagClasses(tag)}`}
              >
                {tag}
              </span>
            ))}
          </div>
          <p class="text-xs text-muted-foreground">{formatDate(item.date)}</p>
        </div>
      </div>
    )
  }
</div>
